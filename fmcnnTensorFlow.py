# -*- coding: utf-8 -*-
"""FMCnn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1owJ9G7TSxM20z5xBj4mDBoLr70-QdJx-
"""

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
# Load the fashion-mnist pre-shuffled train data and test data
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.fashion_mnist.load_data()

xTrainCNN = x_train.reshape((60000, 28, 28, 1))
xTestCNN = x_test.reshape((10000, 28, 28, 1))
xTrainCNN = xTrainCNN
xTestCNN = xTestCNN

yTest = np.zeros((y_test.shape[0],10))
yTrain = np.zeros((y_train.shape[0],10))
i=0
for ele in y_test:
  yTest[i][ele] = 1
  i=i+1
i=0
for ele in y_train:
  yTrain[i][ele] = 1
  i=i+1
print(xTestCNN.shape,xTrainCNN.shape,yTest,y_test,yTrain,y_train)

model = tf.keras.models.Sequential([
		tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1),kernel_initializer = 'he_uniform'),
	  tf.keras.layers.MaxPooling2D((2,2)),
	  #tf.keras.layers.Dropout(0.5),
		tf.keras.layers.BatchNormalization(),
	  tf.keras.layers.Conv2D(64, (3,3), activation='relu',kernel_initializer = 'he_uniform'),
		tf.keras.layers.MaxPooling2D((2,2)),
		tf.keras.layers.BatchNormalization(),
	  #tf.keras.layers.Dropout(0.5),
	  #tf.keras.layers.Conv2D(64, (3,3), activation='relu',kernel_initializer = 'he_uniform'),
		#tf.keras.layers.MaxPooling2D((2,2)),
	  #tf.keras.layers.Dropout(0.5),
		tf.keras.layers.Flatten(),
		tf.keras.layers.Dense(16, activation='relu',kernel_initializer = 'he_uniform'),
		tf.keras.layers.Dense(10, 'softmax')
		])
adamOpt=tf.keras.optimizers.Adam(learning_rate=1e-3)
model.compile(loss="categorical_crossentropy",optimizer=adamOpt,metrics=["accuracy"])

history = model.fit(xTrainCNN,yTrain,epochs=50,batch_size=32)

metric = model.evaluate(xTestCNN,yTest,32)

# Plotting
import matplotlib.image  as mpimg
import matplotlib.pyplot as plt

#print(history)

acc=history.history['acc']
loss=history.history['loss']

epochs=range(len(loss)) 

print(acc,loss)

plt.plot(epochs, acc, 'r')
plt.plot(epochs, loss, 'b')
plt.title('Accuracy and Loss')
plt.xlabel("Epochs")
plt.ylabel("Accuracy")
plt.legend(["Acc", "Loss"])
plt.savefig("Acc-Loss.png")
plt.figure()

model.save('FMCNN.h5')

cmodel = tf.keras.models.load_model('FMCNN.h5')

a = (cmodel.predict(xTestCNN))
oitr = np.argmax(a,axis=1)
print(oitr)
metric = cmodel.evaluate(xTestCNN,yTest,32)
o2 = open('convolution-neural-net.txt','a')
o2.write("Loss on Test Data : "+str(metric[0])+"\n")
o2.write("Accuracy on Test Data : "+str(metric[1])+"\n")
o2.write("gt_label,pred_label"+"\n")
for i in range(10000):
  o2.write(str(y_test[i])+','+str(oitr[i])+'\n')

o2.close()